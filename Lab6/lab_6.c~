#include "lab6.h"
// Initializes global variables
int init()
{
proc[0].uid = 0;
proc[0].cwd = 0;
proc[1].uid = 1;
proc[1].cwd = 0;
running = &(proc[0]);
readQueue = &(proc[1]);
int i = 0;
for(i = 0; i < 100; i++)
{
minode[i].refCount = 0;
minode[i].ino = 0;
}
for(i = 0; i < 10; i++) { MountTable[i].dev = 0;}
root = 0;
}
int menu(char* pathanme)
{
printf("******************************************\n");/*
printf("ls ll cd pwd stat mkdir chmod chown chgrp\n");
printf("creat rmdir link unlink symlink touch open\n");
printf("close lseek pfd read cat write cp mv quit \n");
printf("mount umount\n");*/
printf("ls cd pwd \n");
printf("******************************************\n");
}
//Returns the requested block in buffer
int get_block(int dev1, int blk, char *buf)
{
if (-1 == lseek(dev1, (long)(blk*BLKSIZE), 0))
{
printf("%s\n", strerror(errno));
assert(0);
}
read(dev1, buf, BLKSIZE);
}
int put_block(int dev, int blk, char *buf)
{
if (-1 == lseek(dev, (long)(blk*BLKSIZE), 0)){ assert(0);}
write(dev, buf, BLKSIZE);
return 1;
}
//Tokenizes given pathname into an array of strings terminated with a null string.
char** tokenPath(char* pathname)
{
int i = 0;
char** name;
char* tmp;
name = (char**)malloc(sizeof(char*)*256);
name[0] = strtok(pathname, "/");
i = 1;
while ((name[i] = strtok(NULL, "/")) != NULL) { i++;}
name[i] = 0;
i = 0;
while(name[i])
{
tmp = (char*)malloc(sizeof(char)*strlen(name[i]));
strcpy(tmp, name[i]);
name[i] = tmp;
i++;
}
return name;
}
//searches through 12 blocks to look for str. If found returns ino number, else returns 0 (indicating filepath does not exist)
int search(int dev, char *str, INODE *ip)
{
int i;
char *cp;
DIR *dp;
char buf[BLKSIZE], temp[256];
for(i = 0; i < 12; i++)
{
if(ip->i_block[i] == 0){break;}
get_block(dev, ip->i_block[i], buf);
dp = (DIR *)buf;
cp = buf;
while(cp < buf+BLKSIZE)
{
memset(temp, 0, 256);
strncpy(temp, dp->name, dp->name_len);
if(strcmp(str, temp) == 0){ return dp->inode;}
cp += dp->rec_len;
dp = (DIR*)cp;
}
}
return 0;
}
int searchByIno(int dev, int ino, INODE *ip, char* temp)
{
int i;
char *cp;
DIR *dp;
char buf[BLKSIZE];
for(i = 0; i < 12; i++)
{
if(ip->i_block[i] == 0){ break;}
get_block(dev, ip->i_block[i], buf);
dp = (DIR *)buf;
cp = buf;
while(cp < buf+BLKSIZE)
{
if(ino == dp->inode) //Found the right inode
{
strncpy(temp, dp->name, dp->name_len);
return 1;
}
cp += dp->rec_len;
dp = (DIR*)cp;
}
}
return 0;
}
//Gets the ino number from a given pathname
unsigned int getino(int dev, char *path)
{
int ino = 0, i = 0;
char **tokens;
MINODE *mip = NULL;
if(path && path[0])
{
tokens = tokenPath(path);
}
else //No pathname given so set ino to cwd
{
ino = running->cwd->ino;
return ino;
}
if(path[0]=='/') //start at root dir
{
ip = &(root->INODE);
ino = root->ino;
}
else //start at cwd
{
ip = &(running->cwd->INODE);
}
while(tokens[i])
{
ino = search(dev, tokens[i], ip);
if(0 >= ino)
{
if(mip){ iput(mip->dev, mip);}
return -1;
}
if(mip) { iput(mip->dev, mip);}
i++;
if(tokens[i])
{
mip = iget(dev, ino);
ip = &(mip->INODE);
}
}
i = 0;
while(tokens[i])
{
free(tokens[i]);
i++;
}
if(mip) { iput(mip->dev, mip);}
return ino;
}
MINODE *iget(int dev1, unsigned int ino)
{
int i = 0, blk, offset;
char buf[BLKSIZE];
MINODE *mip = NULL;
//search minode[100] to see if inode already exists in array
for(i = 0; i < 100; i++)
{
// If inode is already in array, set mip to point to MINODE in array, increment MINODE's refCount by 1.
if(minode[i].refCount > 0 && minode[i].ino == ino)
{
//printf("MINODE for inode %d already exists, just copying\n", minode[i].ino); //FOR TESTING
mip = &minode[i];
minode[i].refCount++;
return mip;
}
}
//If you have reached here then the inode does not currently exist in minode[100]. Put inode from disk into free MINODE in array's INODE field.
i = 0;
while(minode[i].refCount > 0 && i < 100) { i++;}
if(i == 100)
{
printf("Error: NO SPACE IN MINODE ARRAY\n");
return 0;
}
blk = (ino-1)/8 + inodeBegin;
offset = (ino-1)%8;
get_block(dev1, blk, buf);
ip = (INODE *)buf + offset;
memcpy(&(minode[i].INODE), ip, sizeof(INODE)); //Copy inode from disk into minode array
minode[i].dev = dev1;
minode[i].ino = ino;
minode[i].refCount = 1;
minode[i].dirty = 0;
minode[i].mounted = 0;
minode[i].mountptr = NULL;
return &minode[i];
}
//
int iput(int dev, MINODE *mip)
{
char buf[BLKSIZE];
int blk, offset;
INODE *tip;
mip->refCount--;
if(mip->refCount > 0) {return 1;}
if(mip->dirty == 0) {return 1;}
//Must write INODE back to disk
blk = (mip->ino-1)/8 + inodeBegin;
offset = (mip->ino-1)%8;
get_block(dev, blk, buf);
tip = (INODE*)buf + offset;
memcpy(tip, &(mip->INODE), sizeof(INODE));
put_block(mip->dev, blk, buf);
return 1;
}
int mount_root(char *devName)
{
char buf[BLKSIZE];
dev = open(devName, O_RDWR); //Open for read/write
if (dev < 0){ //Could not open device
printf("open %s failed\n", devName);
exit(1);
}
get_super(dev, buf);
sp = (SUPER*)buf;
if(is_ext2(buf) <= 0) {exit(0);} //Check is ext2 filesystem, if not exit program
get_inode_table(dev); //Sets global variable inodeBegin to start of inode table
ninodes = sp->s_inodes_count;
root = iget(dev, ROOT_INODE); //Set root inode
proc[0].cwd = iget(dev, ROOT_INODE); // Set cwd for procedure 1 & 2 to root inode
proc[1].cwd = iget(dev, ROOT_INODE);
MountTable[0].mounted_inode = root;
MountTable[0].ninodes = ninodes;
MountTable[0].nblocks = sp->s_blocks_count;
MountTable[0].dev = dev;
strncpy(MountTable[0].name, devName, 256);
return dev;
}
// read SUPER block (block 1) and set contents to buf
int get_super(int dev1, char *buf)
{
get_block(dev1, SUPERBLOCK, buf);
}
// Sets global variable inodeBegin to start of inode table for given device
void get_inode_table(int dev1)
{
char buf[BLKSIZE];
get_gd(dev1, buf);
gp = (GD*)buf;
inodeBegin = gp->bg_inode_table;
bmap = gp->bg_block_bitmap;
imap = gp->bg_inode_bitmap;
}
//Determines if device is an ext2 filesystem. If not exits program.
//Parameter is a buffer of BLKSIZE that contains the super block
int is_ext2(char *buf)
{
sp = (SUPER *)buf;
if (SUPER_MAGIC != sp->s_magic)
{
printf("Error: Not an EXT2 file sytem\n");
return -1;
}
return 1;
}
// Reads group descriptor information in block 2
int get_gd(int dev1, char *buf)
{
get_block(dev1, GDBLOCK, buf);
}
int ls(char* path)
{
int ino;
MINODE *mip;
if(!path || !pathname[0]) { ino = running->cwd->ino;}
else if(pathname[0] == '/' && !pathname[1]) { ino = root->ino;}
else { ino = getino(dev, path);}
if(0 >= ino)
{
printf("Invalid pathname\n");
return -1;
}
mip = iget(dev, ino);
findBlocks(&(mip->INODE), 0);
iput(mip->dev, mip);
}
int cd(char* pathname)
{
MINODE *mip;
unsigned int ino;
if(!pathname || !pathname[0] || (pathname[0] == '/' && !pathname[1])){ ino = root->ino;}
else { ino = getino(dev, pathname);}
if(!ino)
{
printf("Error: Invalid Pathname\n");
return 0;
}
mip = iget(dev, ino);
//Verify inode is a dir
if(!S_ISDIR(mip->INODE.i_mode))
{
printf("Error: End of path is not a directory\n");
iput(dev, mip);
return 0;
}
iput(dev, running->cwd);
running->cwd = mip;
}
int do_pwd(char *pathname)
{
printf("cwd = ");
pwd(running->cwd);
printf("\n");
}
int pwd(MINODE *wd)
{
int ino = 0;
MINODE *next = NULL;
char temp[256];
if(wd == root)
{
printf("/");
return 1;
}
//Get parent's MINODE
ino = search(dev, "..", &(wd->INODE));
if(ino <= 0)
{
printf("ERROR: BAD INODE NUMBER\n");
return -1;
}
next = iget(dev, ino);
if(!next)
{
printf("ERROR: COULD NOT FIND INODE\n");
return -1;
}
pwd(next);
memset(temp, 0, 256);
searchByIno(next->dev, wd->ino, &(next->INODE), temp);
printf("%s/", temp);
iput(next->dev, next);
return;
}
int noPrintPwd(MINODE *wd, char buf[256])
{
int ino = 0;
MINODE *next = NULL;
char temp[256], temp2[256];
strncpy(temp2, buf, 256);
if(wd == root)
{
printf("/");
return 1;
}
//Get parent's MINODE
ino = search(dev, "..", &(wd->INODE));
if(ino <= 0)
{
printf("ERROR: BAD INODE NUMBER\n");
return -1;
}
next = iget(dev, ino);
if(!next)
{
printf("ERROR: COULD NOT FIND INODE\n");
return -1;
}
pwd(next);
memset(temp, 0, 256);
searchByIno(next->dev, wd->ino, &(next->INODE), temp);
sprintf(buf, "/%s%s", temp, temp2);
iput(next->dev, next);
return;
}
int ialloc(int dev1)
{
int i;
char buf[BLKSIZE]; // BLKSIZE=block size in bytes
// get inode Bitmap into buf[ ]
get_block(dev1, imap, buf); // assume FD, bmap block# = 4
for (i=0; i < ninodes; i++){ // assume you know ninodes
if (tst_bit(buf, i)==0){ // assume you have tst_bit() function
set_bit(buf, i); // assume you have set_bit() function
put_block(dev1, imap, buf); // write imap block back to disk
// update free inode count in SUPER and GD on dev
decFreeInodes(dev1); // assume you write this function
return (i+1);
}
}
return 0; // no more FREE inodes
}
int idalloc(int dev, int ino)
{
int i;
char buf[BLKSIZE];
get_block(dev, IBITMAP, buf);
clr_bit(buf, ino-1);
put_block(dev, IBITMAP, buf);
incFreeInodes(dev);
}
int balloc(int dev1)
{
int i;
char buf[BLKSIZE]; // BLKSIZE=block size in bytes
get_block(dev1, bmap, buf);
for (i=0; i < BLKSIZE; i++){ // assume you know ninodes
if (tst_bit(buf, i)==0){ // assume you have tst_bit() function
set_bit(buf, i); // assume you have set_bit() function
put_block(dev1, bmap, buf); // write bmap block back to disk
// update free inode count in SUPER and GD on dev
decFreeBlocks(dev1); // assume you write this function
memset(buf, 0, BLKSIZE);
put_block(dev1, i+1, buf);
return (i+1);
}
}
return 0; // no more FREE inodes
}
int bdalloc(int dev, int ino)
{
int i;
char buf[BLKSIZE];
get_block(dev, BBITMAP, buf);
clr_bit(buf, ino-1);
put_block(dev, BBITMAP, buf);
incFreeBlocks(dev);
}
//Quit program iputs all dirty MINODEs
int quit(char* pathname)
{
int i = 0;
char str[256];
for(i = 0; i < 10; i++)
{
if(running->fd[i] != NULL)
{
snprintf(str, 10, "%d", i);
close_file(str);
}
}
for(i = 0; i < 100; i++)
{
if(minode[i].refCount > 0)
{
if(minode[i].dirty != 0)
{
minode[i].refCount = 1;
iput(dev, &minode[i]);
}
}
}
printf("Exiting Program\n");
exit(0);
}
int tst_bit(char* buf, int i)
{
int byt, offset;
byt = i/8;
offset = i%8;
return (((*(buf+byt))>>offset)&1);
}
int set_bit(char* buf, int i)
{
int byt, offset;
char temp;
char *tempBuf;
byt = i/8;
offset = i%8;
tempBuf = (buf+byt);
temp = *tempBuf;
temp |= (1<<offset);
*tempBuf = temp;
return 1;
}
int clr_bit(char* buf, int i)
{
int byt, offset;
char temp;
char *tempBuf;
byt = i/8;
offset = i%8;
tempBuf = (buf+byt);
temp = *tempBuf;
temp &= (~(1<<offset));
*tempBuf = temp;
return 1;
}
int decFreeInodes(int dev)
{
char buf[BLKSIZE];
get_super(dev, buf);
sp = (SUPER*)buf;
sp->s_free_inodes_count -= 1;
put_block(dev, SUPERBLOCK, buf);
get_gd(dev, buf);
gp = (GD*)buf;
gp->bg_free_inodes_count -=1;
put_block(dev, GDBLOCK, buf);
return 1;
}
int incFreeInodes(int dev)
{
char buf[BLKSIZE];
get_super(dev, buf);
sp = (SUPER*)buf;
sp->s_free_inodes_count += 1;
put_block(dev, SUPERBLOCK, buf);
get_gd(dev, buf);
gp = (GD*)buf;
gp->bg_free_inodes_count +=1;
put_block(dev, GDBLOCK, buf);
return 1;
}
int decFreeBlocks(int dev1)
{
char buf[BLKSIZE];
get_super(dev, buf);
sp = (SUPER*)buf;
sp->s_free_blocks_count -= 1;
put_block(dev1, SUPERBLOCK, buf);
get_gd(dev1, buf);
gp = (GD*)buf;
gp->bg_free_blocks_count -=1;
put_block(dev1, GDBLOCK, buf);
return 1;
}
int incFreeBlocks(int dev1)
{
char buf[BLKSIZE];
get_super(dev, buf);
sp = (SUPER*)buf;
sp->s_free_blocks_count += 1;
put_block(dev1, SUPERBLOCK, buf);
get_gd(dev1, buf);
gp = (GD*)buf;
gp->bg_free_blocks_count +=1;
put_block(dev1, GDBLOCK, buf);
return 1;
}
int stat1(char* path)
{
int ino;
MINODE *mip = NULL;
if(!path || !pathname[0]) { ino = running->cwd->ino;}
else if(pathname[0] == '/' && !pathname[1]) { ino = root->ino;}
else { ino = getino(dev, path);}
if(0 >= ino)
{
printf("Invalid pathname\n");
return -1;
}
mip = iget(dev, ino);
findBlocks(&(mip->INODE), 1);
iput(mip->dev, mip);
return 1;
}
//finds all the data blocks from a pointer to that inode and prints the dir names in those data blocks.
int findBlocks(INODE *ip, int printStat)
{
int i, j , k;
unsigned int buf[256], buf2[256];
//printf("printStat = %d\n", printStat);
printStat = 1;
//Print dirs in direct blocks
for(i = 0; i < 12; i++)
{
if(ip->i_block[i] != 0)
{
printDirs(ip->i_block[i], printStat);
}
}
//Print dirs in indirect blocks
if(ip->i_block[12]) //Indirect block exists
{
get_block(dev, ip->i_block[12], (char*)buf);
for(i = 0; i < 256; i++)
{
if(buf[i]) { printDirs(buf[i], printStat); }
}
}
//Print dirs in double indirect blocks
if(ip->i_block[13]) //Double indirect block exists
{
get_block(dev, ip->i_block[13], (char*)buf);
for(i = 0; i < 256; i++)
{
if(buf[i])
{
get_block(dev, buf[i], (char*)buf2);
for(j = 0; j < 256; j++)
{
if(buf2[j]) { printDirs(buf2[j], printStat);}
}
}
}
}
}
int printDirs(int block, int printStat)
{
int i;
char *cp;
DIR *dp;
char buf[BLKSIZE], temp[256];
get_block(dev, block, buf);
dp = (DIR *)buf;
cp = buf;
while(cp < buf+BLKSIZE)
{
if(printStat) { printStat1(dp);}
else
{
memset(temp, 0, 256);
strncpy(temp, dp->name, dp->name_len);
printf("%4d %4d %4d %s\n", dp->inode, dp->rec_len, dp->name_len, temp);
}
cp += dp->rec_len;
dp = (DIR*)cp;
}
return 0;
}
int printStat1(DIR* dp)
{
struct stat s;
char temp[256], lnk[256];
MINODE *mip;
//Stat File
myStat(dp, &s);
//Print info
if (S_ISLNK(s.st_mode)) { printf("%s ", "LNK"); }
else if (S_ISREG(s.st_mode)) { printf("%s ", "REG"); }
else if(S_ISDIR(s.st_mode)) { printf("%s ", "DIR"); }
else { printf("%s ", "N/A"); }
printf("%hu ", s.st_nlink);
if (test_perm(&s, USER_READ) != 0) {printf("r");}
else {printf("-");}
if (test_perm(&s, USER_WRITE) != 0) {printf("w");}
else {printf("-");}
if (test_perm(&s, USER_EXEC) != 0) {printf("x ");}
else {printf("- ");}
if (test_perm(&s, GROUP_READ) != 0) {printf("r");}
else {printf("-");}
if (test_perm(&s, GROUP_WRITE) != 0) {printf("w");}
else {printf("-");}
if (test_perm(&s, GROUP_EXEC) != 0) {printf("x ");}
else {printf("- ");}
if (test_perm(&s, OTHER_READ) != 0) {printf("r");}
else {printf("-");}
if (test_perm(&s, OTHER_WRITE) != 0) {printf("w");}
else {printf("-");}
if (test_perm(&s, OTHER_EXEC) != 0) {printf("x ");}
else {printf("- ");}
// Print UID
printf("%hu ", (unsigned short)s.st_uid);
// Print size
printf("%lu ", (unsigned long)s.st_size);
// Print ctime in calendar format
strncpy(temp,(char*)ctime(&(s.st_ctime)), 256);
temp[strlen(temp)-1] = 0;
printf("%s ", temp);
//Print filename
memset(temp, 0, 256);
strncpy(temp, dp->name, dp->name_len);
printf("%s ", temp);
if(S_ISLNK(s.st_mode))
{
mip = iget(dev, dp->inode);
printf("-> %s", (char*)mip->INODE.i_block);
iput(mip->dev, mip);
}
printf("\n");
}
int myStat(DIR *dp, struct stat *s)
{
int ino;
MINODE *mip;
if(!dp)
{
printf("Error: No directory entry\n");
return -1;
}
//Get inode
ino = dp->inode;
mip = iget(dev, ino);
ip = &(mip->INODE);
s->st_dev = dev;
s->st_ino = ino;
s->st_mode = ip->i_mode;
s->st_nlink = ip->i_links_count;
s->st_uid = ip->i_uid;
s->st_gid = ip->i_gid;
s->st_size = ip->i_size;
s->st_blksize = BLKSIZE;
s->st_blocks = ip->i_blocks;
s->st_atime = ip->i_atime;
s->st_mtime = ip->i_mtime;
s->st_ctime = ip->i_ctime;
iput(mip->dev, mip);
return 1;
}
int test_mode(struct stat *input, enum stat_mode mode)
{
if (((input->st_mode >> 12) & mode) == mode) { return 1; }
return 0;
}
int test_perm(struct stat *input, enum perm_mode mode)
{
if (((input->st_mode) & mode) != 0) { return 1; }
return 0;
}
int myDirname(char *pathname, char buf[256])
{
int i = 0;
memset(buf, 0, 256);
strcpy(buf, pathname);
while(buf[i]) { i++; }
while(i >= 0)
{
if(buf[i] == '/')
{
buf[i+1] = 0;
//printf("parent = %s\n", buf); //FOR TESTING
return 1;
}
i--;
}
buf[0] = 0;
return 1;
}
int myBasename(char *pathname, char *buf)
{
int i = 0, j = 0;
if(!pathname[0]) {return -1;}
i = strlen(pathname);
while(i >= 0 && pathname[i] != '/') { i--; }
if(pathname[i] == '/')
{
i++;
while(pathname[i]) { buf[j++] = pathname[i++];}
buf[j] = 0;
return 1;
}
else { strncpy(buf, pathname, 256);}
return 1;
}

int open_file(char *pathname)
{
char filePath[256], cMode[256];
int mode, ino, i;
MINODE *mip;
OFT *oftp;
if(split_paths(pathname, filePath, cMode) <= 0) {return -1;}
mode = atoi(cMode);
if(0 >= (ino = getino(dev, pathname)))
{
printf("ERROR: INVALID PATH\n");
return -2;
}
mip = iget(dev, ino);
if(!S_ISREG(mip->INODE.i_mode))
{
printf("ERROR: NOT A REGULAR FILE\n");
iput(mip->dev, mip);
return -1;
}
//TODO: Check permissions
for(i = 0; i < 10; i++)
{
if (running->fd[i] != NULL)
{
if(running->fd[i]->inodeptr == mip)
{
if(running->fd[i]->mode != 0 || mode != 0)
{
printf("ERROR: FILE IS IN USE\n");
iput(mip->dev, mip);
return -1;
}
}
}
}

int close_file(char *pathname)
{
OFT *oftp;
MINODE *mip;
int fd;
if(!pathname[0])
{
printf("ERROR: NO FILE DESCRIPTOR GIVEN\n");
return -1;
}
fd = atoi(pathname);
if (fd > 9 || fd < 0)
{
printf("ERROR: FILE DESCRIPTOR OUT OF RANGE\n");
return -1;
}
if(running->fd[fd] == NULL)
{
printf("ERROR: FILE DESCRIPTOR NOT FOUND\n");
return -1;
}
oftp = running->fd[fd];
running->fd[fd] = 0;
oftp->refCount--;
if(oftp->refCount > 0) {return 1;}
mip = oftp->inodeptr;
iput(mip->dev, mip);
free(oftp);
return 1;
}

int my_mount(char *pathname)
{
char filesys[256], basename[256], mount_point[256], origMP[256], buf[BLKSIZE];
int i, fd, ino;
MINODE *mip;
if(pathname[0] == 0)
{
pmt(pathname);
return 1;
}
if(split_paths(pathname, filesys, mount_point) <= 0) {return -1;}
for(i = 0; i < NMOUNT; i++)
{
if(MountTable[i].dev != 0 && strcmp(MountTable[i].name, filesys) == 0)
{
printf("ERROR: FILE SYSTEM ALREADY MOUNTED\n");
return -1;
}
}
i = 0;
while(MountTable[i].dev != 0) {i++;}
strncpy(origMP, mount_point, 256);
strcat(filesys, " 2");
fd = open_file(filesys);
if(fd < 0 || fd > 9) {return -1;}
memset(buf, 0, BLKSIZE);
get_super(fd, buf);
if(is_ext2(buf) <= 0)
{
sprintf(filesys, "%d", fd);
close_file(filesys);
return -1;
}
sp = (SUPER*)buf;
if(ino = getino(dev, mount_point) <= 0) {return -1;}
mip = iget(dev, ino);
if(!S_ISDIR(mip->INODE.i_mode))
{
printf("ERROR: MOUNT POINT IS NOT A DIRECTORY\n");
iput(mip->dev, mip);
sprintf(filesys, "%d", fd);
close_file(filesys);
return -1;
}
if(mip->refCount > 1)
{
printf("ERROR: MOUNT POINT IS BUSY\n");
iput(mip->dev, mip);
sprintf(filesys, "%d", fd);
close_file(filesys);
return -1;
}
MountTable[i].dev = fd;
MountTable[i].ninodes = sp->s_inodes_count;
MountTable[i].nblocks = sp->s_blocks_count;
MountTable[i].mounted_inode = mip;
myBasename(origMP, basename);
strncpy(MountTable[i].name, basename, 256);
mip->mounted = 1;
mip->mountptr = &(MountTable[i]);
return 1;
}
int my_umount(char *pathname)
{
int i = 0;
MOUNT *mnt;
MINODE *mip;
while(i < NMOUNT)
{
if(strcmp(pathname, MountTable[i].name) == 0) {break;}
i++;
}
if(i == NMOUNT)
{
printf("ERROR: FILE SYSTEM NOT CURRENTLY MOUNTED\n");
return -1;
}
mnt = &(MountTable[i]);
for(i = 0; i < NMINODES; i++)
{
if(minode[i].dev == mnt->dev)
{
printf("ERROR: FILE SYSTEM IS BUSY\n");
return -1;
}
}
mip = mnt->mounted_inode;
mip->mounted = 0;
iput(mip->dev, mip);
mnt->dev = 0;
return 1;
}
